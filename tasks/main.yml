--- 

- name: nginx | ensure nginx_letsencrypt_enabled is false
  assert:
    that:
      - nginx_letsencrypt_enabled is false
    fail_msg: variable nginx_letsencrypt_enabled should be false if nginx_selfsigned_enabled is true
    success_msg: nginx_letsencrypt_enabled is properly set to false
  when: nginx_selfsigned_enabled is true

- name: nginx | ensure nginx_selfsigned_enabled is false
  assert:
    that:
      - nginx_selfsigned_enabled is false
    fail_msg: variable nginx_selfsigned_enabled should be false if nginx_selfsigned_enabled is true
    success_msg: nginx_selfsigned_enabled is properly set to false
  when: nginx_letsencrypt_enabled is true

- name: nginx | Install nginx
  apt:
    name: nginx
    state: latest

- name: nginx | install letsencrypt
  apt:
    name: letsencrypt
    state: latest
  when: nginx_letsencrypt_enabled

- name: nginx | create needed directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0777
  with_items:
    - "{{ nginx_config_directory }}/tls"
  when: nginx_selfsigned_enabled

- name: nginx | create letsencrypt directory
  file:
    name: /var/www/letsencrypt
    state: directory
  when: nginx_letsencrypt_enabled

- name: nginx | Remove default nginx config
  file: 
    name: /etc/nginx/sites-enabled/default
    state: absent

- name: nginx | Install system nginx config
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf

- name: nginx | Create private key (RSA, 4096 bits)
  community.crypto.openssl_privatekey:
    path: "{{ nginx_config_directory }}/tls/certificate.key"
  when: nginx_selfsigned_enabled

- name: nginx | Create selfsigned certs per host
  include_tasks: selfsigned.yml
  loop: "{{ nginx_hosts | map(attribute='domain_name') }}"
  loop_control:
    loop_var: nginx_host
  when: nginx_selfsigned_enabled

- name: nginx | Install nginx site for letsencrypt requests
  template:
    src: nginx-http.j2
    dest: /etc/nginx/sites-enabled/http

- name: nginx | Reload nginx to activate letsencrypt site
  service:
    name: nginx
    state: restarted

- name: nginx | Create letsencrypt combined certificate
  shell: letsencrypt certonly -n --webroot -w /var/www/letsencrypt -m {{ nginx_letsencrypt_email }} --agree-tos -d "{{ nginx_hosts | map(attribute='domain_name') | join(',')  }}" --renew-with-new-domains --cert-name "{{ nginx_hosts | map(attribute='domain_name') | first }}"
  when: nginx_letsencrypt_single_cert and nginx_letsencrypt_enabled

- name: nginx | Create letsencrypt standalone certificate
  shell: letsencrypt certonly -n --webroot -w /var/www/letsencrypt -m {{ nginx_letsencrypt_email }} --agree-tos -d "{{ item }}" --cert-name "{{ nginx_hosts | map(attribute='domain_name') }}"
  loop: "{{ nginx_hosts | map(attribute='domain_name') }}"
  when: not nginx_letsencrypt_single_cert and nginx_letsencrypt_enabled

- name: nginx | Generate dhparams
  shell: openssl dhparam -out /etc/nginx/dhparams.pem 2048
  args:
    creates: /etc/nginx/dhparams.pem

- name: nginx | Install nginx site for specified site
  template:
    src: nginx-le.j2
    dest: /etc/nginx/sites-enabled/le

- name: nginx | Reload nginx to activate specified site
  service: name=nginx state=restarted
- name: Add letsencrypt cronjob for combined cert renewal
  cron:
   name: letsencrypt_renewal
   special_time: weekly
   job: certbot certonly -n --webroot -w /var/www/letsencrypt -m {{ nginx_letsencrypt_email }} --agree-tos -d "{{ nginx_hosts | map(attribute='domain_name') | join(',') }}" && service nginx reload
  when: nginx_letsencrypt_single_cert and nginx_letsencrypt_enabled

- name: nginx | Add letsencrypt cronjob for standalone cert renewal
  cron:
   name: letsencrypt_renewal
   special_time: weekly
   job: certbot certonly -n --webroot -w /var/www/letsencrypt -m {{ nginx_letsencrypt_email }} --agree-tos -d "{{ domain_name }}" && service nginx reload
  loop: "{{ nginx_hosts | map(attribute='domain_name') }}"
  when: not nginx_letsencrypt_single_cert and nginx_letsencrypt_enabled

- name: nginx | install users file
  template:
    src: users.j2
    dest: /etc/nginx/{{item.domain_name}}.htpasswd
  loop: "{{ nginx_hosts|selectattr('users','defined') }}"
  when: nginx_hosts|selectattr('users','defined')
